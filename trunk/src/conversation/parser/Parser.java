/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package conversation.parser;
import conversation.core.*;
import conversation.core.conditions.*;
import conversation.core.effects.*;
import java.util.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();
    void jjtreeOpenNodeScope(Node n) {
        ((ParseNode)n).firstToken = getToken(1);
    }

    void jjtreeCloseNodeScope(Node n) {
        ((ParseNode)n).lastToken = getToken(0);
    }

/****************************************
 *  The Conversation Language Grammar starts here  *
 ****************************************/
  final public ASTConversationTopLevel ConversationTopLevel() throws ParseException {
                                                                        /*@bgen(jjtree) ConversationTopLevel */
    ASTConversationTopLevel jjtn000 = new ASTConversationTopLevel(this, JJTCONVERSATIONTOPLEVEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token t;
    ASTTopicNode topic;
    try {
      jj_consume_token(CONVERSATION);
      t = jj_consume_token(IDENTIFIER);
                                     jjtn000.setName(t.image);
      jj_consume_token(SEMICOLON);
      label_1:
      while (true) {
        jj_consume_token(PARTICIPANT);
        t = jj_consume_token(IDENTIFIER);
                                     jjtn000.addParticipant(t.image);
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARTICIPANT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STARTING:
        case TOPIC:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        topic = TopicNode();
                           jjtn000.addTopic(topic);
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTTopicNode TopicNode() throws ParseException {
                                       /*@bgen(jjtree) TopicNode */
    ASTTopicNode jjtn000 = new ASTTopicNode(this, JJTTOPICNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token t;
    ASTBeatNode beat;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTING:
        jj_consume_token(STARTING);
                 jjtn000.setStarting(true);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(TOPIC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                                                         jjtn000.setName(t.image);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STARTING:
        case BEAT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        beat = BeatNode();
                         jjtn000.addBeat(beat);
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTBeatNode BeatNode() throws ParseException {
                                    /*@bgen(jjtree) BeatNode */
    ASTBeatNode jjtn000 = new ASTBeatNode(this, JJTBEATNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token t;
    ASTGroupNode root;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTING:
        jj_consume_token(STARTING);
                 jjtn000.setStarting(true);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(BEAT);
      root = GroupNode();
                        jjtn000.setRoot(root);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public NodeGroup GroupNode() throws ParseException {
    Token t;
    ASTLeafNode leaf;
    ASTGroupNode group;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEQ:
      t = jj_consume_token(SEQ);
      break;
    case OP:
      t = jj_consume_token(OP);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                            jjtn000.setType(t.image);
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
        leaf = LeafNode();
                           jjtn000.addLeaf(leaf);
        break;
      case OP:
      case SEQ:
        group = GroupNode();
                               jjtn000.addGroup(group);
        break;
      case BEAT:
        jj_consume_token(BEAT);
        jj_consume_token(BREAK);
                          jjtn000.addBeatBreak();
        break;
      case TOPIC:
        jj_consume_token(TOPIC);
        jj_consume_token(BREAK);
                           jjtn000.addTopicBreak();
        break;
      case END:
        jj_consume_token(END);
        jj_consume_token(CONVERSATION);
                                jjtn000.addEndConversation();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOPIC:
      case BEAT:
      case NODE:
      case OP:
      case SEQ:
      case END:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(RBRACE);
     {if (true) return jjtn000;}
    throw new Error("Missing return statement in function");
  }

  final public DialogueNode LeafNode() throws ParseException {
    Token t;
    DialogueNode.Builder builder = new DialogueNode.Builder();
    Condition condition;
    Map<String, Object> attributes;
    List<Effect> effects;
    jj_consume_token(NODE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                              builder.label = t.image;
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      condition = When();
                             builder.condition = condition;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    attributes = Attributes();
                                   builder.attributes = attributes;
    effects = Effects();
                             builder.effects = effects;
    jj_consume_token(RBRACE);
     {if (true) return builder.build();}
    throw new Error("Missing return statement in function");
  }

  final public List<Effect> Effects() throws ParseException {
    List<Effect> r = new ArrayList<Effect>();
    Effect effect;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      effect = Effect();
                        r.add(effect);
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Effect Effect() throws ParseException {
    Token t;
    Object value;
    Effect effect;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      value = Value();
                                    effect = new SetFlagEffect(t.image, value);
      break;
    case INCR:
      jj_consume_token(INCR);
                  effect = new IncrementFlagEffect(t.image);
      break;
    case DECR:
      jj_consume_token(DECR);
                  effect = new DecrementFlagEffect(t.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return effect;}
    throw new Error("Missing return statement in function");
  }

// literal or identifier
  final public Object Value() throws ParseException {
    Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATING_POINT_LITERAL:
      value = jj_consume_token(FLOATING_POINT_LITERAL);
                                            Double.valueOf(value.image);
      break;
    case INTEGER_LITERAL:
      value = jj_consume_token(INTEGER_LITERAL);
                                     Integer.valueOf(value.image);
      break;
    case STRING_LITERAL:
      value = jj_consume_token(STRING_LITERAL);
                                    value.image.substring(1,value.image.length()-2);
      break;
    case IDENTIFIER:
      value = jj_consume_token(IDENTIFIER);
                                result = value.image;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String, Object> Attributes() throws ParseException {
    Token key;
    Object value;
    Map<String, Object> r = new HashMap<String, Object>();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      key = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      value = Value();
                                                  r.put(key.image, value);
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Condition When() throws ParseException {
    Condition result;
    jj_consume_token(WHEN);
    result = Condition();
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Condition Condition() throws ParseException {
    Condition r;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      r = Condition1();
      jj_consume_token(RPAREN);
      break;
    case BANG:
      jj_consume_token(BANG);
      r = Condition();
                              r = new Not(r);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                        r = new LogicVariable(t.image);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// for and, or blocks.
  final public Condition Condition1() throws ParseException {
    Condition r;
    List<Condition> body = new ArrayList<Condition>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case LPAREN:
    case BANG:
      r = Condition();
                     body.add(r);
      label_7:
      while (true) {
        jj_consume_token(SC_AND);
        r = Condition();
                                     body.add(r);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
      }
                                                      r = new MultiAnd(body);
      break;
    case SC_OR:
      label_8:
      while (true) {
        jj_consume_token(SC_OR);
        r = Condition();
                                    body.add(r);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
      }
                                                     r = new MultiOr(body);
     {if (true) return r;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x400000,0x1800000,0x800000,0x0,0x2800000,0x800000,0x18000000,0x5f000000,0x5f000000,0x0,0x80000000,0x0,0x0,0x122000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x6002000,0x1,0x1,0x8009,0x1000000,0x800000,0x808009,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[83];
    for (int i = 0; i < 83; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
