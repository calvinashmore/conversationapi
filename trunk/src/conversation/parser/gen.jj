/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. C:\Projects\ConversationAPI\src\conversation\parser\gen.jj */
/*@egen*/
options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;                                                                           
  DEBUG_PARSER = false;

    //USER_CHAR_STREAM = true; // user provided CharStream - LexerInputCharStream
    //BUILD_TOKEN_MANAGER = true; // build token manager
    //UNICODE_INPUT = true; // input will be all unicode characters
}

PARSER_BEGIN(Parser)

package conversation.parser;
import conversation.core.*;
import conversation.core.conditions.*;
import conversation.core.effects.*;
import java.util.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/

    void jjtreeOpenNodeScope(Node n) {
	((ParseNode)n).firstToken = getToken(1);
    }

    void jjtreeCloseNodeScope(Node n) {
	((ParseNode)n).lastToken = getToken(0);
    }
}

PARSER_END(Parser)



/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}





/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* KEYWORDS */

TOKEN :
{
    < CONVERSATION: "conversation" >
|   < PARTICIPANT: "participant" >
|   < STARTING: "starting" >
|   < TOPIC: "topic" >
|   < BEAT: "beat" >
|   < NODE: "node" >
|   < OP: "op" >
|   < SEQ: "seq" >
|   < BREAK: "break" >
|   < END: "end" >
|   < WHEN: "when" >
}


/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}



/****************************************
 *  The Conversation Language Grammar starts here  *
 ****************************************/



ASTConversationTopLevel ConversationTopLevel()                       : {/*@bgen(jjtree) ConversationTopLevel */
    ASTConversationTopLevel jjtn000 = new ASTConversationTopLevel(this, JJTCONVERSATIONTOPLEVEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    Token t;
    ASTTopicNode topic;
} {/*@bgen(jjtree) ConversationTopLevel */
    try {
/*@egen*/
    <CONVERSATION> t = <IDENTIFIER> {jjtn000.setName(t.image);} <SEMICOLON>
    (<PARTICIPANT> t = <IDENTIFIER> {jjtn000.addParticipant(t.image);} <SEMICOLON>)+

    ( topic = TopicNode() {jjtn000.addTopic(topic);} )*

    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTTopicNode TopicNode()            : {/*@bgen(jjtree) TopicNode */
    ASTTopicNode jjtn000 = new ASTTopicNode(this, JJTTOPICNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    Token t;
    ASTBeatNode beat;
} {/*@bgen(jjtree) TopicNode */
    try {
/*@egen*/
    [<STARTING> {jjtn000.setStarting(true);}] <TOPIC> [t = <IDENTIFIER> {jjtn000.setName(t.image);}] <LBRACE>
    ( beat = BeatNode() {jjtn000.addBeat(beat);} )*
    <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/

    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTBeatNode BeatNode()           : {/*@bgen(jjtree) BeatNode */
    ASTBeatNode jjtn000 = new ASTBeatNode(this, JJTBEATNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    Token t;
    ASTGroupNode root;
} {/*@bgen(jjtree) BeatNode */
    try {
/*@egen*/
    [<STARTING> {jjtn000.setStarting(true);}] <BEAT>
    root = GroupNode() {jjtn000.setRoot(root);}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

NodeGroup GroupNode()       : {
    Token t;
    ASTLeafNode leaf;
    ASTGroupNode group;
} {
    (t = <SEQ> | t = <OP>) {jjtn000.setType(t.image);} <LBRACE>
        (
        leaf = LeafNode() {jjtn000.addLeaf(leaf);}
        | group = GroupNode() {jjtn000.addGroup(group);}
        | <BEAT> <BREAK> {jjtn000.addBeatBreak();}
        | <TOPIC> <BREAK> {jjtn000.addTopicBreak();}
        | <END> <CONVERSATION> {jjtn000.addEndConversation();}
        )+
    <RBRACE>

    {return jjtn000;}
}

DialogueNode LeafNode()       : {
    Token t;
    DialogueNode.Builder builder = new DialogueNode.Builder();
    Condition condition;
    Map<String, Object> attributes;
    List<Effect> effects;
} {
    <NODE> [t = <IDENTIFIER> {builder.label = t.image;}] <LBRACE>
        [condition = When() {builder.condition = condition;}]
        attributes = Attributes() {builder.attributes = attributes;}
        effects = Effects() {builder.effects = effects;}
    <RBRACE>

    {return builder.build();}
}

List<Effect> Effects()       : {
    List<Effect> r = new ArrayList<Effect>();
    Effect effect;
} {
    (effect = Effect() {r.add(effect);})*
    {return r;}
}

Effect Effect()       : {
    Token t;
    Object value;
    Effect effect;
} {
    t = <IDENTIFIER> (
          <ASSIGN> value = Value() {effect = new SetFlagEffect(t.image, value);}
        | <INCR> {effect = new IncrementFlagEffect(t.image);}
        | <DECR> {effect = new DecrementFlagEffect(t.image);}
    )
    {return effect;}
}

// literal or identifier
Object Value()       : {
    Object result;
} {
    (     value = <FLOATING_POINT_LITERAL> {Double.valueOf(value.image);}
        | value = <INTEGER_LITERAL> {Integer.valueOf(value.image);}
        | value = <STRING_LITERAL> {value.image.substring(1,value.image.length()-2);}
        | value = <IDENTIFIER> {result = value.image;}
    )
    {return result;}
}

Map<String, Object> Attributes()       : {
    Token key;
    Object value;
    Map<String, Object> r = new HashMap<String, Object>();
} {
    ( key = <IDENTIFIER> <COLON> value = Value() {r.put(key.image, value);})*
    {return r;}
}

Condition When()       : {
    Condition result;
} {
    <WHEN> result = Condition()
    {return result;}
}

Condition Condition()       : {
    Condition r;
    Token t;
} {
    ( <LPAREN> r = Condition1() <RPAREN>
    | <BANG> r = Condition() {r = new Not(r);}
    | t = <IDENTIFIER> {r = new LogicVariable(t.image);}
    )
    {return r;}
}

// for and, or blocks.
Condition Condition1()       : {
    Condition r;
    List<Condition> body = new ArrayList<Condition>(); // body for and/or blocks.
} {
    r = Condition() {body.add(r);}

        ( (<SC_AND> r = Condition() {body.add(r);})+ {r = new MultiAnd(body);} )
    |   ( (<SC_OR> r = Condition() {body.add(r);})+ {r = new MultiOr(body);} )

    {return r;}
}

